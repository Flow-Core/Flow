{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Flow",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#literals"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#datatypes"
		},
		{
			"include": "#functions"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.flow",
					"match": "\\b(if|else|for|foreach|while|do|switch|case|default|func|class|interface|try|catch)\\b"
				},
				{
					"name": "keyword.general.flow",
					"match": "\\b(in|is|as|null|new|break|continue|return)\\b"
				},
				{
					"name": "keyword.classes.flow",
					"match": "\\b(init|constructor)\\b"
				},
				{
					"name": "keyword.declaration.flow",
					"match": "\\b(const|val|var)\\b"
				},
				{
					"name": "keyword.access.flow",
					"match": "\\b(private|protected|public|static|abstract|final|open|data|sealed|override)\\b"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"name": "keyword.package.flow",
					"match": "\\b(package)\\b"
				},
				{
					"name": "keyword.import.flow",
					"match": "\\b(import)\\b"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.line.double-slash.flow",
					"match": "//.*"
				},
				{
					"name": "comment.block.flow",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"name": "constant.language.boolean.flow",
					"match": "\\b(true|false|null)\\b"
				},
				{
					"name": "constant.numeric.ip.flow",
					"match": "\\d+\\.\\d+\\.\\d+\\.\\d+"
				},
				{
					"name": "constant.numeric.float.flow",
					"match": "\\d+\\.\\d+f|\\d+f"
				},
				{
					"name": "constant.numeric.double.flow",
					"match": "\\d+\\.\\d+|\\.\\d+"
				},
				{
					"name": "constant.numeric.int.flow",
					"match": "\\d+"
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.flow",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.flow",
					"match": "\\\\."
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.flow",
					"match": "==|!=|<=|>=|<|>|\\+\\+|--|\\+|-|\\*|/|%|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.assignment.flow",
					"match": "="
				},
				{
					"name": "keyword.operator.colon.flow",
					"match": ":"
				},
				{
					"name": "keyword.operator.dot.flow",
					"match": "\\."
				},
				{
					"name": "keyword.operator.comma.flow",
					"match": ","
				}
			]
		},
		"datatypes": {
			"patterns": [
				{
					"name": "support.type.flow",
					"match": "\\b(Int|Double|Float|Bool|String|Ip|Port|Address|FlowIO)\\b"
				}
			]
		},
		"functions": {
			"patterns": [
				{
					"name": "entity.name.function.flow",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
				}
			]
		}
	},
	"scopeName": "source.flow"
}